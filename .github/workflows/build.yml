name: Build, Test and Deploy App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          # Lista dos microserviços com suas respectivas configurações
          - name: api
            context: ./src/TechChallenge01.Api
            dockerfile: Dockerfile
            tag: ${{ secrets.DOCKER_USERNAME }}/tech-challenge-api:latest
          - name: apiqueue
            context: ./src/TechChallenge01.ApiMessaging
            dockerfile: Dockerfile
            tag: ${{ secrets.DOCKER_USERNAME }}/tech-challenge-apiqueue:latest
          - name: tokenapi
            context: ./src/TechChallenge01.TokenApi
            dockerfile: Dockerfile
            tag: ${{ secrets.DOCKER_USERNAME }}/tech-challenge-tokenapi:latest
          - name: webstatus
            context: ./src/TechChallenge01.WebStatus
            dockerfile: Dockerfile
            tag: ${{ secrets.DOCKER_USERNAME }}/tech-challenge-webstatus:latest
          - name: apigateway
            context: ./src/TechChallenge01.ApiGateway
            dockerfile: Dockerfile
            tag: ${{ secrets.DOCKER_USERNAME }}/tech-challenge-apigateway:latest
          - name: rabbitmq-consumer
            context: ./src/TechChallenge01.Infra.Consumer
            dockerfile: Dockerfile
            tag: ${{ secrets.DOCKER_USERNAME }}/tech-challenge-rabbitmq-consumer:latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore, Build and Test
        run: |
          dotnet restore ./TechChallenge01.sln
          dotnet build ./TechChallenge01.sln --configuration Release --no-restore
          dotnet test ./TechChallenge01.sln --configuration Release --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.SECRET_DOCKERHUB }}

      - name: Build and push Docker image for ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ matrix.service.tag }}

  build_postgres:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and push PostgreSQL image
        uses: docker/build-push-action@v6
        with:
          # O contexto aponta para a pasta onde se encontra o Dockerfile customizado do PostgreSQL
          context: ./Configs
          file: Dockerfile.postgres
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tech-challenge-postgres:latest
